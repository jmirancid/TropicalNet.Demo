//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Xml.Serialization;


namespace Demo.Entities
{
    [Serializable]
    public partial class Track
    {
        #region Primitive Properties
    
        public virtual int TrackId
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual Nullable<int> AlbumId
        {
            get { return _albumId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_albumId != value)
                    {
                        if (Album != null && Album.AlbumId != value)
                        {
                            Album = null;
                        }
                        _albumId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _albumId;
    
        public virtual int MediaTypeId
        {
            get { return _mediaTypeId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_mediaTypeId != value)
                    {
                        if (MediaType != null && MediaType.MediaTypeId != value)
                        {
                            MediaType = null;
                        }
                        _mediaTypeId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _mediaTypeId;
    
        public virtual Nullable<int> GenreId
        {
            get { return _genreId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_genreId != value)
                    {
                        if (Genre != null && Genre.GenreId != value)
                        {
                            Genre = null;
                        }
                        _genreId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _genreId;
    
        public virtual string Composer
        {
            get;
            set;
        }
    
        public virtual int Milliseconds
        {
            get;
            set;
        }
    
        public virtual Nullable<int> Bytes
        {
            get;
            set;
        }
    
        public virtual decimal UnitPrice
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual Album Album
        {
            get { return _album; }
            set
            {
                if (!ReferenceEquals(_album, value))
                {
                    var previousValue = _album;
                    _album = value;
                    FixupAlbum(previousValue);
                }
            }
        }
        private Album _album;
    
        public virtual Genre Genre
        {
            get { return _genre; }
            set
            {
                if (!ReferenceEquals(_genre, value))
                {
                    var previousValue = _genre;
                    _genre = value;
                    FixupGenre(previousValue);
                }
            }
        }
        private Genre _genre;
    
    	//[XmlElement("InvoiceLine", typeof(Collection<InvoiceLine>))]
        public virtual ICollection<InvoiceLine> InvoiceLine
        {
            get
            {
                if (_invoiceLine == null)
                {
                    var newCollection = new FixupCollection<InvoiceLine>();
                    newCollection.CollectionChanged += FixupInvoiceLine;
                    _invoiceLine = newCollection;
                }
                return _invoiceLine;
            }
            set
            {
                if (!ReferenceEquals(_invoiceLine, value))
                {
                    var previousValue = _invoiceLine as FixupCollection<InvoiceLine>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupInvoiceLine;
                    }
                    _invoiceLine = value;
                    var newValue = value as FixupCollection<InvoiceLine>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupInvoiceLine;
                    }
                }
            }
        }
    	//[XmlElement("InvoiceLine", typeof(Collection<InvoiceLine>))]
        private ICollection<InvoiceLine> _invoiceLine;
    
        public virtual MediaType MediaType
        {
            get { return _mediaType; }
            set
            {
                if (!ReferenceEquals(_mediaType, value))
                {
                    var previousValue = _mediaType;
                    _mediaType = value;
                    FixupMediaType(previousValue);
                }
            }
        }
        private MediaType _mediaType;
    
    	//[XmlElement("Playlist", typeof(Collection<Playlist>))]
        public virtual ICollection<Playlist> Playlist
        {
            get
            {
                if (_playlist == null)
                {
                    var newCollection = new FixupCollection<Playlist>();
                    newCollection.CollectionChanged += FixupPlaylist;
                    _playlist = newCollection;
                }
                return _playlist;
            }
            set
            {
                if (!ReferenceEquals(_playlist, value))
                {
                    var previousValue = _playlist as FixupCollection<Playlist>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPlaylist;
                    }
                    _playlist = value;
                    var newValue = value as FixupCollection<Playlist>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPlaylist;
                    }
                }
            }
        }
    	//[XmlElement("Playlist", typeof(Collection<Playlist>))]
        private ICollection<Playlist> _playlist;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupAlbum(Album previousValue)
        {
            if (previousValue != null && previousValue.Track.Contains(this))
            {
                previousValue.Track.Remove(this);
            }
    
            if (Album != null)
            {
                if (!Album.Track.Contains(this))
                {
                    Album.Track.Add(this);
                }
                if (AlbumId != Album.AlbumId)
                {
                    AlbumId = Album.AlbumId;
                }
            }
            else if (!_settingFK)
            {
                AlbumId = null;
            }
        }
    
        private void FixupGenre(Genre previousValue)
        {
            if (previousValue != null && previousValue.Track.Contains(this))
            {
                previousValue.Track.Remove(this);
            }
    
            if (Genre != null)
            {
                if (!Genre.Track.Contains(this))
                {
                    Genre.Track.Add(this);
                }
                if (GenreId != Genre.GenreId)
                {
                    GenreId = Genre.GenreId;
                }
            }
            else if (!_settingFK)
            {
                GenreId = null;
            }
        }
    
        private void FixupMediaType(MediaType previousValue)
        {
            if (previousValue != null && previousValue.Track.Contains(this))
            {
                previousValue.Track.Remove(this);
            }
    
            if (MediaType != null)
            {
                if (!MediaType.Track.Contains(this))
                {
                    MediaType.Track.Add(this);
                }
                if (MediaTypeId != MediaType.MediaTypeId)
                {
                    MediaTypeId = MediaType.MediaTypeId;
                }
            }
        }
    
        private void FixupInvoiceLine(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (InvoiceLine item in e.NewItems)
                {
                    item.Track = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (InvoiceLine item in e.OldItems)
                {
                    if (ReferenceEquals(item.Track, this))
                    {
                        item.Track = null;
                    }
                }
            }
        }
    
        private void FixupPlaylist(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Playlist item in e.NewItems)
                {
                    if (!item.Track.Contains(this))
                    {
                        item.Track.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Playlist item in e.OldItems)
                {
                    if (item.Track.Contains(this))
                    {
                        item.Track.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}
