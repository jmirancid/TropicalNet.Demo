//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Xml.Serialization;


namespace Demo.Entities
{
    [Serializable]
    public partial class Invoice
    {
        #region Primitive Properties
    
        public virtual int InvoiceId
        {
            get;
            set;
        }
    
        public virtual int CustomerId
        {
            get { return _customerId; }
            set
            {
                if (_customerId != value)
                {
                    if (Customer != null && Customer.CustomerId != value)
                    {
                        Customer = null;
                    }
                    _customerId = value;
                }
            }
        }
        private int _customerId;
    
        public virtual System.DateTime InvoiceDate
        {
            get;
            set;
        }
    
        public virtual string BillingAddress
        {
            get;
            set;
        }
    
        public virtual string BillingCity
        {
            get;
            set;
        }
    
        public virtual string BillingState
        {
            get;
            set;
        }
    
        public virtual string BillingCountry
        {
            get;
            set;
        }
    
        public virtual string BillingPostalCode
        {
            get;
            set;
        }
    
        public virtual decimal Total
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual Customer Customer
        {
            get { return _customer; }
            set
            {
                if (!ReferenceEquals(_customer, value))
                {
                    var previousValue = _customer;
                    _customer = value;
                    FixupCustomer(previousValue);
                }
            }
        }
        private Customer _customer;
    
    	//[XmlElement("InvoiceLine", typeof(Collection<InvoiceLine>))]
        public virtual ICollection<InvoiceLine> InvoiceLine
        {
            get
            {
                if (_invoiceLine == null)
                {
                    var newCollection = new FixupCollection<InvoiceLine>();
                    newCollection.CollectionChanged += FixupInvoiceLine;
                    _invoiceLine = newCollection;
                }
                return _invoiceLine;
            }
            set
            {
                if (!ReferenceEquals(_invoiceLine, value))
                {
                    var previousValue = _invoiceLine as FixupCollection<InvoiceLine>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupInvoiceLine;
                    }
                    _invoiceLine = value;
                    var newValue = value as FixupCollection<InvoiceLine>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupInvoiceLine;
                    }
                }
            }
        }
    	//[XmlElement("InvoiceLine", typeof(Collection<InvoiceLine>))]
        private ICollection<InvoiceLine> _invoiceLine;

        #endregion
        #region Association Fixup
    
        private void FixupCustomer(Customer previousValue)
        {
            if (previousValue != null && previousValue.Invoice.Contains(this))
            {
                previousValue.Invoice.Remove(this);
            }
    
            if (Customer != null)
            {
                if (!Customer.Invoice.Contains(this))
                {
                    Customer.Invoice.Add(this);
                }
                if (CustomerId != Customer.CustomerId)
                {
                    CustomerId = Customer.CustomerId;
                }
            }
        }
    
        private void FixupInvoiceLine(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (InvoiceLine item in e.NewItems)
                {
                    item.Invoice = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (InvoiceLine item in e.OldItems)
                {
                    if (ReferenceEquals(item.Invoice, this))
                    {
                        item.Invoice = null;
                    }
                }
            }
        }

        #endregion
    }
}
